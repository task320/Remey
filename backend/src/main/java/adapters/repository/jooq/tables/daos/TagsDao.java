/*
 * This file is generated by jOOQ.
 */
package adapters.repository.jooq.tables.daos;


import adapters.repository.jooq.tables.Tags;
import adapters.repository.jooq.tables.records.TagsRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagsDao extends DAOImpl<TagsRecord, adapters.repository.jooq.tables.pojos.Tags, Integer> {

    /**
     * Create a new TagsDao without any configuration
     */
    public TagsDao() {
        super(Tags.TAGS, adapters.repository.jooq.tables.pojos.Tags.class);
    }

    /**
     * Create a new TagsDao with an attached configuration
     */
    public TagsDao(Configuration configuration) {
        super(Tags.TAGS, adapters.repository.jooq.tables.pojos.Tags.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(adapters.repository.jooq.tables.pojos.Tags object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<adapters.repository.jooq.tables.pojos.Tags> fetchById(Integer... values) {
        return fetch(Tags.TAGS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public adapters.repository.jooq.tables.pojos.Tags fetchOneById(Integer value) {
        return fetchOne(Tags.TAGS.ID, value);
    }

    /**
     * Fetch records that have <code>users_id IN (values)</code>
     */
    public List<adapters.repository.jooq.tables.pojos.Tags> fetchByUsersId(String... values) {
        return fetch(Tags.TAGS.USERS_ID, values);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<adapters.repository.jooq.tables.pojos.Tags> fetchByName(String... values) {
        return fetch(Tags.TAGS.NAME, values);
    }
}
