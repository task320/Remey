/*
 * This file is generated by jOOQ.
 */
package adapters.repository.jooq.tables;


import adapters.repository.jooq.Indexes;
import adapters.repository.jooq.Keys;
import adapters.repository.jooq.Remey;
import adapters.repository.jooq.tables.records.BalanceRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Balance extends TableImpl<BalanceRecord> {

    private static final long serialVersionUID = -256663679;

    /**
     * The reference instance of <code>remey.balance</code>
     */
    public static final Balance BALANCE = new Balance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BalanceRecord> getRecordType() {
        return BalanceRecord.class;
    }

    /**
     * The column <code>remey.balance.id</code>.
     */
    public final TableField<BalanceRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('balance_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>remey.balance.users_id</code>.
     */
    public final TableField<BalanceRecord, Integer> USERS_ID = createField("users_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>remey.balance.income</code>.
     */
    public final TableField<BalanceRecord, Long> INCOME = createField("income", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remey.balance.spending</code>.
     */
    public final TableField<BalanceRecord, Long> SPENDING = createField("spending", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>remey.balance.create_at</code>.
     */
    public final TableField<BalanceRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>remey.balance.update_at</code>.
     */
    public final TableField<BalanceRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>remey.balance.version</code>.
     */
    public final TableField<BalanceRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>remey.balance</code> table reference
     */
    public Balance() {
        this(DSL.name("balance"), null);
    }

    /**
     * Create an aliased <code>remey.balance</code> table reference
     */
    public Balance(String alias) {
        this(DSL.name(alias), BALANCE);
    }

    /**
     * Create an aliased <code>remey.balance</code> table reference
     */
    public Balance(Name alias) {
        this(alias, BALANCE);
    }

    private Balance(Name alias, Table<BalanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Balance(Name alias, Table<BalanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Balance(Table<O> child, ForeignKey<O, BalanceRecord> key) {
        super(child, key, BALANCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Remey.REMEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BALANCE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BalanceRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BALANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BalanceRecord> getPrimaryKey() {
        return Keys.BALANCE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BalanceRecord>> getKeys() {
        return Arrays.<UniqueKey<BalanceRecord>>asList(Keys.BALANCE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BalanceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BalanceRecord, ?>>asList(Keys.BALANCE__BALANCE_USERS_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.BALANCE__BALANCE_USERS_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Balance as(String alias) {
        return new Balance(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Balance as(Name alias) {
        return new Balance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Balance rename(String name) {
        return new Balance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Balance rename(Name name) {
        return new Balance(name, null);
    }
}
